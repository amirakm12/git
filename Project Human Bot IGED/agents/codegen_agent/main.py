"""
CodeGen Agent for IGED
AI-powered code generation and development tasks
"""

import os
import subprocess
import tempfile
from pathlib import Path
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class CodeGenAgent:
    def __init__(self, memory_engine):
        self.memory = memory_engine
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
    
    def execute(self, target: str, parameters: Dict[str, Any] = None) -> str:
        """Execute code generation task"""
        try:
            logger.info(f"🤖 CodeGen executing: {target}")
            
            # Parse the target to determine what to generate
            if "flask" in target.lower() or "web" in target.lower():
                return self._generate_flask_app(target)
            elif "python" in target.lower() or "script" in target.lower():
                return self._generate_python_script(target)
            elif "html" in target.lower() or "website" in target.lower():
                return self._generate_html_website(target)
            elif "api" in target.lower() or "rest" in target.lower():
                return self._generate_rest_api(target)
            else:
                return self._generate_generic_code(target)
                
        except Exception as e:
            logger.error(f"❌ CodeGen execution failed: {e}")
            return f"❌ Code generation error: {str(e)}"
    
    def _generate_flask_app(self, target: str) -> str:
        """Generate a Flask web application"""
        try:
            app_name = "flask_app"
            if "for" in target.lower():
                app_name = target.lower().split("for")[-1].strip().replace(" ", "_")
            
            app_dir = self.output_dir / app_name
            app_dir.mkdir(exist_ok=True)
            
            # Generate main app file
            app_code = f'''from flask import Flask, render_template, request, jsonify
import os

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/api/data')
def get_data():
    return jsonify({{"message": "Hello from {app_name}!", "status": "success"}})

@app.route('/api/submit', methods=['POST'])
def submit_data():
    data = request.get_json()
    return jsonify({{"received": data, "status": "success"}})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
'''
            
            # Generate templates directory
            templates_dir = app_dir / "templates"
            templates_dir.mkdir(exist_ok=True)
            
            # Generate HTML template
            html_template = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{app_name.title()}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #333;
            text-align: center;
        }}
        .api-section {{
            margin: 20px 0;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
        }}
        button {{
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }}
        button:hover {{
            background: #0056b3;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome to {app_name.title()}</h1>
        <p>This is a Flask web application generated by IGED.</p>
        
        <div class="api-section">
            <h3>API Test</h3>
            <button onclick="testAPI()">Test API</button>
            <div id="api-result"></div>
        </div>
    </div>

    <script>
        async function testAPI() {{
            try {{
                const response = await fetch('/api/data');
                const data = await response.json();
                document.getElementById('api-result').innerHTML = 
                    '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
            }} catch (error) {{
                document.getElementById('api-result').innerHTML = 
                    '<p style="color: red;">Error: ' + error.message + '</p>';
            }}
        }}
    </script>
</body>
</html>
'''
            
            # Write files
            with open(app_dir / "app.py", "w") as f:
                f.write(app_code)
            
            with open(templates_dir / "index.html", "w") as f:
                f.write(html_template)
            
            # Generate requirements.txt
            requirements = "flask==2.3.3\nflask-cors==4.0.0\n"
            with open(app_dir / "requirements.txt", "w") as f:
                f.write(requirements)
            
            # Generate README
            readme = f'''# {app_name.title()}

A Flask web application generated by IGED.

## Installation

```bash
pip install -r requirements.txt
```

## Running

```bash
python app.py
```

The application will be available at http://localhost:5000

## Features

- RESTful API endpoints
- HTML templates
- JSON data handling
- Responsive design
'''
            
            with open(app_dir / "README.md", "w") as f:
                f.write(readme)
            
            return f"✅ Flask application '{app_name}' generated successfully at {app_dir}"
            
        except Exception as e:
            logger.error(f"❌ Flask app generation failed: {e}")
            return f"❌ Failed to generate Flask app: {str(e)}"
    
    def _generate_python_script(self, target: str) -> str:
        """Generate a Python script"""
        try:
            script_name = "script.py"
            if "for" in target.lower():
                script_name = target.lower().split("for")[-1].strip().replace(" ", "_") + ".py"
            
            script_path = self.output_dir / script_name
            
            # Generate script content based on target
            if "data" in target.lower() or "analysis" in target.lower():
                script_content = f'''#!/usr/bin/env python3
"""
Data Analysis Script
Generated by IGED
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path

def analyze_data(file_path):
    """Analyze data from file"""
    try:
        # Load data
        if file_path.endswith('.csv'):
            data = pd.read_csv(file_path)
        elif file_path.endswith('.xlsx'):
            data = pd.read_excel(file_path)
        else:
            print(f"Unsupported file format: {{file_path}}")
            return
        
        print(f"Data shape: {{data.shape}}")
        print(f"Columns: {{list(data.columns)}}")
        print("\\nFirst few rows:")
        print(data.head())
        
        # Basic statistics
        print("\\nBasic statistics:")
        print(data.describe())
        
        # Create output directory
        output_dir = Path("analysis_output")
        output_dir.mkdir(exist_ok=True)
        
        # Generate plots
        for column in data.select_dtypes(include=[np.number]).columns:
            plt.figure(figsize=(10, 6))
            data[column].hist(bins=30)
            plt.title(f"Histogram of {{column}}")
            plt.xlabel(column)
            plt.ylabel("Frequency")
            plt.savefig(output_dir / f"{{column}}_histogram.png")
            plt.close()
        
        print(f"\\nAnalysis complete. Plots saved to {{output_dir}}")
        
    except Exception as e:
        print(f"Error analyzing data: {{e}}")

if __name__ == "__main__":
    # Example usage
    file_path = input("Enter data file path: ")
    analyze_data(file_path)
'''
            else:
                script_content = f'''#!/usr/bin/env python3
"""
Python Script
Generated by IGED
"""

import os
import sys
from pathlib import Path

def main():
    """Main function"""
    print("Hello from IGED-generated script!")
    print(f"Current directory: {{os.getcwd()}}")
    print(f"Python version: {{sys.version}}")
    
    # Add your code here
    pass

if __name__ == "__main__":
    main()
'''
            
            with open(script_path, "w") as f:
                f.write(script_content)
            
            # Make executable on Unix systems
            os.chmod(script_path, 0o755)
            
            return f"✅ Python script '{script_name}' generated successfully at {script_path}"
            
        except Exception as e:
            logger.error(f"❌ Python script generation failed: {e}")
            return f"❌ Failed to generate Python script: {str(e)}"
    
    def _generate_html_website(self, target: str) -> str:
        """Generate an HTML website"""
        try:
            site_name = "website"
            if "for" in target.lower():
                site_name = target.lower().split("for")[-1].strip().replace(" ", "_")
            
            site_dir = self.output_dir / site_name
            site_dir.mkdir(exist_ok=True)
            
            # Generate main HTML file
            html_content = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{site_name.title()}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        
        header {{
            background: rgba(255, 255, 255, 0.95);
            padding: 20px 0;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }}
        
        h1 {{
            text-align: center;
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
        }}
        
        .subtitle {{
            text-align: center;
            color: #7f8c8d;
            font-size: 1.2em;
        }}
        
        .content {{
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }}
        
        .feature-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }}
        
        .feature-card {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }}
        
        .feature-card h3 {{
            color: #2c3e50;
            margin-bottom: 10px;
        }}
        
        .cta-button {{
            display: inline-block;
            background: #667eea;
            color: white;
            padding: 15px 30px;
            text-decoration: none;
            border-radius: 25px;
            font-weight: bold;
            transition: transform 0.3s ease;
        }}
        
        .cta-button:hover {{
            transform: translateY(-2px);
            background: #5a6fd8;
        }}
        
        footer {{
            text-align: center;
            margin-top: 30px;
            color: rgba(255, 255, 255, 0.8);
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>{site_name.title()}</h1>
            <p class="subtitle">Generated by IGED - Your AI Assistant</p>
        </header>
        
        <div class="content">
            <h2>Welcome to {site_name.title()}</h2>
            <p>This website was automatically generated by IGED, your sovereign AI assistant. 
            It demonstrates the power of AI-driven development and automation.</p>
            
            <div class="feature-grid">
                <div class="feature-card">
                    <h3>🚀 Fast & Responsive</h3>
                    <p>Built with modern web technologies for optimal performance across all devices.</p>
                </div>
                
                <div class="feature-card">
                    <h3>🎨 Beautiful Design</h3>
                    <p>Clean, modern design with smooth animations and intuitive user experience.</p>
                </div>
                
                <div class="feature-card">
                    <h3>🔧 Easy to Customize</h3>
                    <p>Well-structured code that's easy to modify and extend for your specific needs.</p>
                </div>
                
                <div class="feature-card">
                    <h3>📱 Mobile Friendly</h3>
                    <p>Responsive design that looks great on desktop, tablet, and mobile devices.</p>
                </div>
            </div>
            
            <div style="text-align: center; margin: 40px 0;">
                <a href="#" class="cta-button">Get Started</a>
            </div>
        </div>
        
        <footer>
            <p>&copy; 2024 {site_name.title()}. Powered by IGED.</p>
        </footer>
    </div>
    
    <script>
        // Add some interactivity
        document.addEventListener('DOMContentLoaded', function() {{
            // Animate feature cards on scroll
            const cards = document.querySelectorAll('.feature-card');
            
            const observer = new IntersectionObserver((entries) => {{
                entries.forEach(entry => {{
                    if (entry.isIntersecting) {{
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }}
                }});
            }});
            
            cards.forEach(card => {{
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                observer.observe(card);
            }});
        }});
    </script>
</body>
</html>
'''
            
            with open(site_dir / "index.html", "w") as f:
                f.write(html_content)
            
            return f"✅ HTML website '{site_name}' generated successfully at {site_dir}"
            
        except Exception as e:
            logger.error(f"❌ HTML website generation failed: {e}")
            return f"❌ Failed to generate HTML website: {str(e)}"
    
    def _generate_rest_api(self, target: str) -> str:
        """Generate a REST API"""
        try:
            api_name = "rest_api"
            if "for" in target.lower():
                api_name = target.lower().split("for")[-1].strip().replace(" ", "_")
            
            api_dir = self.output_dir / api_name
            api_dir.mkdir(exist_ok=True)
            
            # Generate main API file
            api_code = f'''from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import os
from datetime import datetime

app = Flask(__name__)
CORS(app)

# In-memory storage (replace with database in production)
data_store = {{}}

@app.route('/')
def home():
    return jsonify({{
        "message": "Welcome to {api_name}",
        "version": "1.0.0",
        "endpoints": [
            "/api/data",
            "/api/data/<id>",
            "/api/health"
        ]
    }})

@app.route('/api/health')
def health_check():
    return jsonify({{
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "{api_name}"
    }})

@app.route('/api/data', methods=['GET'])
def get_all_data():
    return jsonify({{
        "data": list(data_store.values()),
        "count": len(data_store)
    }})

@app.route('/api/data/<id>', methods=['GET'])
def get_data(id):
    if id in data_store:
        return jsonify(data_store[id])
    else:
        return jsonify({{"error": "Not found"}}), 404

@app.route('/api/data', methods=['POST'])
def create_data():
    try:
        data = request.get_json()
        if not data:
            return jsonify({{"error": "No data provided"}}), 400
        
        # Generate ID
        import uuid
        id = str(uuid.uuid4())
        
        # Add timestamp
        data['id'] = id
        data['created_at'] = datetime.now().isoformat()
        
        data_store[id] = data
        
        return jsonify({{
            "message": "Data created successfully",
            "id": id,
            "data": data
        }}), 201
        
    except Exception as e:
        return jsonify({{"error": str(e)}}), 500

@app.route('/api/data/<id>', methods=['PUT'])
def update_data(id):
    try:
        if id not in data_store:
            return jsonify({{"error": "Not found"}}), 404
        
        data = request.get_json()
        if not data:
            return jsonify({{"error": "No data provided"}}), 400
        
        # Update data
        data_store[id].update(data)
        data_store[id]['updated_at'] = datetime.now().isoformat()
        
        return jsonify({{
            "message": "Data updated successfully",
            "data": data_store[id]
        }})
        
    except Exception as e:
        return jsonify({{"error": str(e)}}), 500

@app.route('/api/data/<id>', methods=['DELETE'])
def delete_data(id):
    if id not in data_store:
        return jsonify({{"error": "Not found"}}), 404
    
    deleted_data = data_store.pop(id)
    
    return jsonify({{
        "message": "Data deleted successfully",
        "deleted_data": deleted_data
    }})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
'''
            
            # Generate requirements
            requirements = "flask==2.3.3\nflask-cors==4.0.0\n"
            with open(api_dir / "requirements.txt", "w") as f:
                f.write(requirements)
            
            # Generate README
            readme = f'''# {api_name.title()}

A REST API generated by IGED.

## Installation

```bash
pip install -r requirements.txt
```

## Running

```bash
python app.py
```

The API will be available at http://localhost:5000

## Endpoints

- `GET /` - API information
- `GET /api/health` - Health check
- `GET /api/data` - Get all data
- `GET /api/data/<id>` - Get specific data
- `POST /api/data` - Create new data
- `PUT /api/data/<id>` - Update data
- `DELETE /api/data/<id>` - Delete data

## Example Usage

```bash
# Create data
curl -X POST http://localhost:5000/api/data \\
  -H "Content-Type: application/json" \\
  -d '{{"name": "test", "value": 123}}'

# Get all data
curl http://localhost:5000/api/data
'''
            
            with open(api_dir / "README.md", "w") as f:
                f.write(readme)
            
            with open(api_dir / "app.py", "w") as f:
                f.write(api_code)
            
            return f"✅ REST API '{api_name}' generated successfully at {api_dir}"
            
        except Exception as e:
            logger.error(f"❌ REST API generation failed: {e}")
            return f"❌ Failed to generate REST API: {str(e)}"
    
    def _generate_generic_code(self, target: str) -> str:
        """Generate generic code based on target"""
        try:
            file_name = "generated_code.py"
            if "for" in target.lower():
                file_name = target.lower().split("for")[-1].strip().replace(" ", "_") + ".py"
            
            file_path = self.output_dir / file_name
            
            code_content = f'''#!/usr/bin/env python3
"""
Generated Code
Target: {target}
Generated by IGED
"""

import os
import sys
from pathlib import Path
from datetime import datetime

def main():
    """Main function"""
    print("=" * 50)
    print("IGED Generated Code")
    print("=" * 50)
    print(f"Target: {target}")
    print(f"Generated: {{datetime.now()}}")
    print(f"Python: {{sys.version}}")
    print(f"Working Directory: {{os.getcwd()}}")
    print("=" * 50)
    
    # Add your custom logic here based on the target
    print("\\nProcessing target: {target}")
    
    # Example processing
    if "file" in target.lower():
        print("File processing logic would go here")
    elif "data" in target.lower():
        print("Data processing logic would go here")
    elif "network" in target.lower():
        print("Network processing logic would go here")
    else:
        print("Generic processing logic")
    
    print("\\nCode execution complete!")

if __name__ == "__main__":
    main()
'''
            
            with open(file_path, "w") as f:
                f.write(code_content)
            
            return f"✅ Generic code generated successfully at {file_path}"
            
        except Exception as e:
            logger.error(f"❌ Generic code generation failed: {e}")
            return f"❌ Failed to generate generic code: {str(e)}"
    
    def get_status(self) -> Dict[str, Any]:
        """Get agent status"""
        return {
            'status': 'active',
            'agent': 'codegen',
            'output_directory': str(self.output_dir),
            'generated_files': len(list(self.output_dir.glob("*")))
        } 